From 37f768cfbf6ec8857917afc2435dc33aa22448e4 Mon Sep 17 00:00:00 2001
From: xutao <xutao@espressif.com>
Date: Mon, 7 Mar 2022 18:12:56 +0800
Subject: [PATCH] add task create API for allocated stack in

---
 components/freertos/include/freertos/task.h | 11 +++++
 components/freertos/tasks.c                 | 48 +++++++++++++++++++++
 2 files changed, 59 insertions(+)

diff --git a/components/freertos/include/freertos/task.h b/components/freertos/include/freertos/task.h
index 73fa040526..6a5a7ad0e7 100644
--- a/components/freertos/include/freertos/task.h
+++ b/components/freertos/include/freertos/task.h
@@ -351,6 +351,17 @@ typedef enum
 
 #endif
 
+#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
+
+	BaseType_t xTaskCreateRestrictedPinnedToCore( const TaskParameters_t * const pxTaskDefinition,
+                                                  TaskHandle_t *pxCreatedTask,
+                                                  const BaseType_t xCoreID);
+
+
+#endif
+
+
+
 /**
  * Create a new task and add it to the list of tasks that are ready to run.
  *
diff --git a/components/freertos/tasks.c b/components/freertos/tasks.c
index 8035025480..26d6b441b0 100644
--- a/components/freertos/tasks.c
+++ b/components/freertos/tasks.c
@@ -981,6 +981,54 @@ BaseType_t xTaskCreateRestrictedStaticPinnedToCore(TaskFunction_t pxTaskCode,
 #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 /*-----------------------------------------------------------*/
 
+#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
+
+	BaseType_t xTaskCreateRestrictedPinnedToCore( const TaskParameters_t * const pxTaskDefinition,
+                                                  TaskHandle_t *pxCreatedTask,
+                                                  const BaseType_t xCoreID)
+	{
+	TCB_t *pxNewTCB;
+	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
+
+		configASSERT( pxTaskDefinition->puxStackBuffer );
+
+		if( pxTaskDefinition->puxStackBuffer != NULL )
+		{
+			/* Allocate space for the TCB.  Where the memory comes from depends
+			on the implementation of the port malloc function and whether or
+			not static allocation is being used. */
+			pxNewTCB = ( TCB_t * ) pvPortMallocTcbMem( sizeof( TCB_t ) );
+
+			if( pxNewTCB != NULL )
+			{
+				/* Store the stack location in the TCB. */
+				pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
+
+				/* Tasks can be created statically or dynamically, so note
+				this task had a statically allocated stack in case it is
+				later deleted.  The TCB was allocated dynamically. */
+				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
+
+				prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
+										pxTaskDefinition->pcName,
+										pxTaskDefinition->usStackDepth,
+										pxTaskDefinition->pvParameters,
+										pxTaskDefinition->uxPriority,
+										pxCreatedTask, pxNewTCB,
+										pxTaskDefinition->xRegions,
+										xCoreID );
+
+				prvAddNewTaskToReadyList( pxNewTCB, pxTaskDefinition->pvTaskCode, xCoreID );
+				xReturn = pdPASS;
+			}
+		}
+
+		return xReturn;
+	}
+
+#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
+/*-----------------------------------------------------------*/
+
 static void prvInitialiseNewTask( TaskFunction_t pxTaskCode,
                                   const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                   const uint32_t ulStackDepth,
-- 
2.17.1

